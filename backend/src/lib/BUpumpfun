import axios, { AxiosInstance } from 'axios';
import { PublicKey, Keypair, VersionedTransaction } from '@solana/web3.js';
import bs58 from 'bs58';
import { pumpApiBase, slippageBps } from '../env';
import { log } from './logger';
import { connection } from './solana';
import {
  PumpFunTokenData,
  PumpPortalResponse,
  PumpFunError,
  ClaimableFeesResponse,
} from '../types';

class PumpFunAPI {
  private client: AxiosInstance;

  constructor(baseURL: string) {
    this.client = axios.create({
      baseURL,
      timeout: 30000,
      headers: {
        'Content-Type': 'application/json',
      },
    });
  }

  // Get token data from Pump.fun
  async getTokenData(mint: string): Promise<PumpFunTokenData> {
    try {
      log.debug('Fetching token data from Pump.fun', { mint });
      
      const response = await this.client.get(`/coins/${mint}`);
      return response.data;
    } catch (error) {
      throw new PumpFunError(
        `Failed to fetch token data: ${error}`,
        { mint, error }
      );
    }
  }

  // Get bonding curve data
  async getBondingCurveData(mint: string) {
    try {
      const tokenData = await this.getTokenData(mint);
      const bondingCurveAddress = tokenData.bondingCurve;

      log.debug('Fetching bonding curve data', { bondingCurveAddress });

      // Get bonding curve account data
      const accountInfo = await connection.getAccountInfo(
        new PublicKey(bondingCurveAddress)
      );

      if (!accountInfo) {
        throw new PumpFunError('Bonding curve account not found');
      }

      return {
        address: bondingCurveAddress,
        data: accountInfo.data,
        creator: tokenData.creator,
      };
    } catch (error) {
      throw new PumpFunError(
        `Failed to fetch bonding curve: ${error}`,
        { mint, error }
      );
    }
  }

  // Check claimable creator fees
  async getClaimableFees(mint: string): Promise<ClaimableFeesResponse> {
    try {
      log.monitor('Checking claimable fees', { mint });

      // PumpPortal API endpoint for checking fees
      const response = await this.client.get(`/fees/${mint}`);

      const claimableFees = response.data.claimable || 0;
      const bondingCurveAddress = response.data.bondingCurve || '';

      log.monitor('Claimable fees retrieved', {
        mint,
        claimableFees,
        bondingCurveAddress,
      });

      return {
        claimableFees,
        timestamp: Date.now(),
        bondingCurveAddress,
      };
    } catch (error) {
      // If endpoint doesn't exist, try alternative method
      if (axios.isAxiosError(error) && error.response?.status === 404) {
        log.warn('Fees endpoint not found, using fallback method');
        return this.getClaimableFeesFromBondingCurve(mint);
      }

      throw new PumpFunError(
        `Failed to check claimable fees: ${error}`,
        { mint, error }
      );
    }
  }

  // Fallback: Calculate claimable fees from bonding curve
  private async getClaimableFeesFromBondingCurve(
    mint: string
  ): Promise<ClaimableFeesResponse> {
    try {
      const bondingCurve = await this.getBondingCurveData(mint);
      
      // Parse bonding curve data to extract claimable fees
      // Note: This is a simplified version - actual implementation depends on Pump.fun's data structure
      const data = bondingCurve.data;
      
      // Claimable fees are typically stored at a specific offset in the account data
      // This needs to be adjusted based on actual Pump.fun bonding curve structure
      const claimableFeesLamports = data.readBigUInt64LE(32); // Example offset
      const claimableFees = Number(claimableFeesLamports) / 1e9; // Convert to SOL

      return {
        claimableFees,
        timestamp: Date.now(),
        bondingCurveAddress: bondingCurve.address,
      };
    } catch (error) {
      throw new PumpFunError(
        `Failed to calculate claimable fees: ${error}`,
        { mint, error }
      );
    }
  }

  // Claim creator fees using PumpPortal
  async claimFees(
    mint: string,
    creatorKeypair: Keypair,
    amount?: number
  ): Promise<string> {
    try {
      log.claim('Initiating fee claim', { mint, amount });

      // Build claim transaction via PumpPortal
      const response = await this.client.post('/trade', {
        publicKey: creatorKeypair.publicKey.toBase58(),
        action: 'claim',
        mint,
        amount: amount ? amount * 1e9 : undefined, // Convert SOL to lamports if specified
      });

      if (!response.data || !response.data.transaction) {
        throw new PumpFunError('Invalid claim response from PumpPortal');
      }

      // Deserialize and sign transaction
      const txBuffer = Buffer.from(response.data.transaction, 'base64');
      const transaction = VersionedTransaction.deserialize(txBuffer);
      
      transaction.sign([creatorKeypair]);

      // Send transaction
      const signature = await connection.sendTransaction(transaction, {
        skipPreflight: false,
        maxRetries: 3,
      });

      log.claim('Fee claim transaction sent', { signature, mint });

      // Wait for confirmation
      await connection.confirmTransaction(signature, 'confirmed');

      log.claim('Fee claim confirmed', { signature, mint });

      return signature;
    } catch (error) {
      throw new PumpFunError(
        `Failed to claim fees: ${error}`,
        { mint, amount, error }
      );
    }
  }

  // Buy tokens using PumpPortal
  async buyToken(
    mint: string,
    amountSol: number,
    buyerKeypair: Keypair,
    slippage: number = slippageBps,
    priorityFee: number = 0.0001 // Default 0.0001 SOL priority fee
  ): Promise<{ signature: string; tokensPurchased: string }> {
    try {
      log.buyback('Initiating token purchase', {
        mint,
        amountSol,
        slippage,
        priorityFee,
      });

      // Build buy transaction via PumpPortal
      const response = await this.client.post('/trade', {
        publicKey: buyerKeypair.publicKey.toBase58(),
        action: 'buy',
        mint,
        amount: amountSol,
        denominatedInSol: 'true',
        slippage,
        priorityFee: Math.floor(priorityFee * 1e9), // Convert to lamports
      });

      if (!response.data || !response.data.transaction) {
        throw new PumpFunError('Invalid buy response from PumpPortal');
      }

      // Deserialize and sign transaction
      const txBuffer = Buffer.from(response.data.transaction, 'base64');
      const transaction = VersionedTransaction.deserialize(txBuffer);
      
      transaction.sign([buyerKeypair]);

      // Send transaction
      const signature = await connection.sendTransaction(transaction, {
        skipPreflight: false,
        maxRetries: 3,
      });

      log.buyback('Buy transaction sent', { signature, mint });

      // Wait for confirmation
      await connection.confirmTransaction(signature, 'confirmed');

      // Get tokens purchased from transaction logs
      const txDetails = await connection.getTransaction(signature, {
        maxSupportedTransactionVersion: 0,
      });

      const tokensPurchased = this.extractTokensPurchased(txDetails);

      log.buyback('Token purchase confirmed', {
        signature,
        tokensPurchased,
        mint,
      });

      return { signature, tokensPurchased };
    } catch (error) {
      throw new PumpFunError(
        `Failed to buy tokens: ${error}`,
        { mint, amountSol, error }
      );
    }
  }

  // Extract tokens purchased from transaction details
  private extractTokensPurchased(txDetails: any): string {
    try {
      if (!txDetails?.meta?.postTokenBalances) {
        return '0';
      }

      // Find token balance change
      const preBalances = txDetails.meta.preTokenBalances || [];
      const postBalances = txDetails.meta.postTokenBalances || [];

      for (const postBalance of postBalances) {
        const preBalance = preBalances.find(
          (b: any) => b.accountIndex === postBalance.accountIndex
        );

        if (preBalance) {
          const change =
            BigInt(postBalance.uiTokenAmount.amount) -
            BigInt(preBalance.uiTokenAmount.amount);

          if (change > 0) {
            return change.toString();
          }
        } else if (BigInt(postBalance.uiTokenAmount.amount) > 0) {
          return postBalance.uiTokenAmount.amount;
        }
      }

      return '0';
    } catch (error) {
      log.error('Failed to extract tokens purchased', error);
      return '0';
    }
  }

  // Get current token price from bonding curve
  async getTokenPrice(mint: string): Promise<number> {
    try {
      const bondingCurve = await this.getBondingCurveData(mint);
      
      // Calculate price from bonding curve reserves
      // This is a simplified calculation - adjust based on actual Pump.fun formula
      const data = bondingCurve.data;
      
      const virtualSolReserves = data.readBigUInt64LE(8);
      const virtualTokenReserves = data.readBigUInt64LE(16);
      
      const price = Number(virtualSolReserves) / Number(virtualTokenReserves);
      
      log.debug('Token price calculated', { mint, price });
      
      return price;
    } catch (error) {
      throw new PumpFunError(
        `Failed to get token price: ${error}`,
        { mint, error }
      );
    }
  }
}

// Export singleton instance
export const pumpFunAPI = new PumpFunAPI(pumpApiBase);

// Export class for testing
export { PumpFunAPI };